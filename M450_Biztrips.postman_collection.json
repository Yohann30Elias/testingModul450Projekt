{
	"info": {
		"_postman_id": "b459e682-4d73-4bd5-913a-365c0d73d80b",
		"name": "M450_Biztrips",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36244607"
	},
	"item": [
		{
			"name": "Show Trips",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the correct Content-Type header\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the array of trips with the expected schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.forEach(trip => {\r",
							"        pm.expect(trip).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(trip).to.have.property('title').that.is.a('string');\r",
							"        pm.expect(trip).to.have.property('description').that.is.a('string');\r",
							"        pm.expect(trip).to.have.property('startTrip').that.is.an('array');\r",
							"        pm.expect(trip).to.have.property('endTrip').that.is.an('array');\r",
							"        pm.expect(trip).to.have.property('meetings').that.is.an('array');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3001/trips",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"trips"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Trip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.title).to.exist;\r",
							"    pm.expect(responseData.description).to.exist;\r",
							"    pm.expect(responseData.startTrip).to.exist;\r",
							"    pm.expect(responseData.endTrip).to.exist;\r",
							"    pm.expect(responseData.meetings).to.exist;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3001/trips/1",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"trips",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Trip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an empty object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object').that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:3001/trips/1",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"trips",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Trip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.title).to.exist;\r",
							"    pm.expect(responseData.description).to.exist;\r",
							"    pm.expect(responseData.startTrip).to.exist;\r",
							"    pm.expect(responseData.endTrip).to.exist;\r",
							"    pm.expect(responseData.meetings).to.exist;\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"StartTrip and EndTrip arrays contain valid coordinates\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.startTrip).to.be.an('array').that.is.not.empty;\r",
							"    responseData.startTrip.forEach(coordinate => {\r",
							"        pm.expect(coordinate).to.be.a('number');\r",
							"    });\r",
							"\r",
							"    pm.expect(responseData.endTrip).to.be.an('array').that.is.not.empty;\r",
							"    responseData.endTrip.forEach(coordinate => {\r",
							"        pm.expect(coordinate).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Meetings array is present and contains expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.meetings).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData.meetings).to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title and description must be non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"title\": \"BT01\",\r\n        \"description\": \"San Francisco World Trade Center on new Server/IOT/Client \",\r\n        \"startTrip\": [\r\n            2021,\r\n            2,\r\n            13,\r\n            0,\r\n            0\r\n        ],\r\n        \"endTrip\": [\r\n            2021,\r\n            2,\r\n            15,\r\n            16,\r\n            56\r\n        ],\r\n        \"meetings\": [\r\n            {\r\n                \"id\": 1,\r\n                \"title\": \"One Conference\",\r\n                \"description\": \"Key Note on One Conference\"\r\n            },\r\n            {\r\n                \"id\": 2,\r\n                \"title\": \"Zero Conference\",\r\n                \"description\": \"Workshop Zero on One Conference\"\r\n            }\r\n        ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3001/trips",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"trips"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change Trip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.title).to.exist;\r",
							"    pm.expect(responseData.description).to.exist;\r",
							"    pm.expect(responseData.startTrip).to.exist;\r",
							"    pm.expect(responseData.endTrip).to.exist;\r",
							"    pm.expect(responseData.meetings).to.exist;\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Meetings array contains at least one element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.meetings).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.meetings.forEach(function(meeting) {\r",
							"        pm.expect(meeting).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(meeting).to.have.property('title').that.is.a('string');\r",
							"        pm.expect(meeting).to.have.property('description').that.is.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"BT01\",\r\n        \"description\": \"San Francisco World Trade Center on new Server/IOT/Client \",\r\n        \"startTrip\": [\r\n            2021,\r\n            2,\r\n            13,\r\n            0,\r\n            0\r\n        ],\r\n        \"endTrip\": [\r\n            2021,\r\n            2,\r\n            15,\r\n            16,\r\n            56\r\n        ],\r\n        \"meetings\": [\r\n            {\r\n                \"id\": 1,\r\n                \"title\": \"One Conference\",\r\n                \"description\": \"Key Note on One Conference\"\r\n            },\r\n            {\r\n                \"id\": 2,\r\n                \"title\": \"Zero Conference\",\r\n                \"description\": \"Workshop Zero on One Conference\"\r\n            }\r\n        ]\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3001/trips/1",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"trips",
						"1"
					]
				}
			},
			"response": []
		}
	]
}